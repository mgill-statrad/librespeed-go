name: speedtest-go
on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'
      - name: Print Go environment
        run: go env
      - name: Run tests with coverage
        run: |
          go test -v -coverprofile=coverage.out ./...
      - name: Post coverage summary to PR
        uses: k1LoW/octocov-action@v1
        with:
          coverage: coverage.out

  release:
    runs-on: windows-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'
      - name: Build librespeed.exe
        run: |
          go build -o librespeed.exe main.go
      - name: Upload librespeed.exe
        uses: actions/upload-artifact@v4
        with:
          name: librespeed-exe
          path: librespeed.exe
      - name: Create release archive
        run: |
          Compress-Archive -Path librespeed.exe,speedtest_servers.json -DestinationPath librespeed-release.zip
      - name: Get latest tag
        id: get_tag
        run: |
          git fetch --tags
          latest_tag=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1)
          if [ -z "$latest_tag" ]; then
            echo "::set-output name=tag::v1.0.0"
          else
            IFS='.' read -r major minor patch <<< "${latest_tag#v}"
            patch=$((patch+1))
            echo "::set-output name=tag::v$major.$minor.$patch"
          fi
        shell: bash
      - name: Create and push tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag ${{ steps.get_tag.outputs.tag }}
          git push origin ${{ steps.get_tag.outputs.tag }}
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_tag.outputs.tag }}
          release_name: Release ${{ steps.get_tag.outputs.tag }}
          draft: false
          prerelease: false
      - name: Upload release archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: librespeed-release.zip
          asset_name: librespeed-release.zip
          asset_content_type: application/zip
